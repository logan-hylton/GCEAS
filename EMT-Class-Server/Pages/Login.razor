@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Login> Logger

<PageTitle>Login</PageTitle>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">


<div class="container pt-5">
    <h3 class="text-center">Login</h3>
    <div class="row justify-content-center align-items-center">
        <div class="col-md-6">
            <div class="col-md-12 text-center">
                <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <InputText @bind-Value="loginModel.Email" placeholder="Email" class="mt-2 mb-2" /><br/>
                    <InputText @bind-Value="loginModel.Password" placeholder="Password" class="mb-2" /><br/>
                    <button class="btn btn-primary mt-2" type="submit">Login</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .validation-message {
        list-style-type: none;
    }

    .validation-errors {
        padding-left: 0;
    }
</style>

@code {
    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }
    }

    public class SignupModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [Required]
        public string? FName { get; set; }

        [Required]
        public string? LName { get; set; }
    }

    private LoginModel loginModel = new();

    private SignupModel signupModel = new();

    private enum AuthenticationType
    {
        Login,
        SignUp
    }


    private void HandleLogin()
    {
        Logger.LogInformation($"HandleLogin called with values: {loginModel.Email}, {loginModel.Password}");
        if (loginModel.Email != null && loginModel.Password != null)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(loginModel.Email, loginModel.Password);
        }
    }
}
